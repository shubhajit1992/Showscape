package com.showscape.movieservice.service;

import static java.util.stream.Collectors.toList;

import com.showscape.movieservice.dto.MovieRequest;
import com.showscape.movieservice.dto.MovieResponse;
import com.showscape.movieservice.entity.Movie;
import com.showscape.movieservice.exception.MovieNotFoundException;
import com.showscape.movieservice.repository.MovieRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.List;

/**
 * Service class for managing movie-related operations.
 */
@Service
@RequiredArgsConstructor
public class MovieService {

    private final MovieRepository movieRepository;

    /**
     * Creates a new movie entry in the database.
     *
     * @param movieRequest the request object containing movie details
     * @return the created movie response
     */
    public MovieResponse createMovie(MovieRequest movieRequest) {
        Movie movie = Movie.builder()
                .id(null) // ID will be generated by DB
                .title(movieRequest.title())
                .description(movieRequest.description())
                .releaseDate(movieRequest.releaseDate())
                .genre(movieRequest.genre())
                .rating(movieRequest.rating())
                .build();
        return mapToMovieResponse(movieRepository.save(movie));
    }

    /**
     * Retrieves a movie by its ID.
     *
     * @param id the ID of the movie
     * @return the movie response
     * @throws MovieNotFoundException if the movie is not found
     */
    public MovieResponse getMovieById(Long id) {
        Movie movie = movieRepository.findById(id)
                .orElseThrow(() -> new MovieNotFoundException("Movie not found with id: " + id));
        return mapToMovieResponse(movie);
    }

    /**
     * Retrieves all movies from the database.
     *
     * @return a list of movie responses
     */
    public List<MovieResponse> getAllMovies() {
        return movieRepository.findAll().stream()
                .map(this::mapToMovieResponse)
                .toList();
    }

    /**
     * Updates an existing movie entry.
     *
     * @param id           the ID of the movie to update
     * @param movieRequest the request object containing updated movie details
     * @return the updated movie response
     * @throws MovieNotFoundException if the movie is not found
     */
    public MovieResponse updateMovie(Long id, MovieRequest movieRequest) {
        Movie existingMovie = movieRepository.findById(id)
                .orElseThrow(() -> new MovieNotFoundException("Movie not found with id: " + id));

        existingMovie.setTitle(movieRequest.title());
        existingMovie.setDescription(movieRequest.description());
        existingMovie.setReleaseDate(movieRequest.releaseDate());
        existingMovie.setGenre(movieRequest.genre());
        existingMovie.setRating(movieRequest.rating());

        return mapToMovieResponse(movieRepository.save(existingMovie));
    }

    /**
     * Deletes a movie by its ID.
     *
     * @param id the ID of the movie to delete
     * @throws MovieNotFoundException if the movie is not found
     */
    public void deleteMovie(Long id) {
        if (!movieRepository.existsById(id)) {
            throw new MovieNotFoundException("Movie not found with id: " + id);
        }
        movieRepository.deleteById(id);
    }

    /**
     * Retrieves movies by genre.
     *
     * @param genre the genre to filter movies by
     * @return a list of movie responses matching the genre
     */
    public List<MovieResponse> getMoviesByGenre(String genre) {
        return movieRepository.findByGenre(genre).stream()
                .map(this::mapToMovieResponse)
                .collect(toList());
    }

    /**
     * Retrieves movies by release year.
     *
     * @param year the release year to filter movies by
     * @return a list of movie responses matching the release year
     */
    public List<MovieResponse> getMoviesByReleaseYear(int year) {
        return movieRepository.findByReleaseYear(year).stream()
                .map(this::mapToMovieResponse)
                .collect(toList());
    }

    private MovieResponse mapToMovieResponse(Movie movie) {
        return MovieResponse.builder()
                .id(movie.getId())
                .title(movie.getTitle())
                .description(movie.getDescription())
                .releaseDate(movie.getReleaseDate())
                .genre(movie.getGenre())
                .rating(movie.getRating())
                .build();
    }
}
